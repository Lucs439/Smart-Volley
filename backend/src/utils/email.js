const logger = require('./logger');

class EmailService {
  constructor() {
    this.isProduction = process.env.NODE_ENV === 'production';
    this.templates = {
      verification: {
        subject: 'V√©rifiez votre compte PAWW üêæ',
        template: (code) => `
          Bonjour !
          
          Votre code de v√©rification PAWW est : ${code}
          
          Ce code expire dans 15 minutes.
          
          Si vous n'avez pas cr√©√© de compte, ignorez cet email.
          
          L'√©quipe PAWW
        `
      },
      passwordReset: {
        subject: 'R√©initialisez votre mot de passe PAWW üîê',
        template: (code) => `
          Bonjour !
          
          Votre code de r√©initialisation PAWW est : ${code}
          
          Ce code expire dans 30 minutes.
          
          Si vous n'avez pas demand√© cette r√©initialisation, ignorez cet email.
          
          L'√©quipe PAWW
        `
      },
      welcome: {
        subject: 'Bienvenue chez PAWW ! üéâ',
        template: (firstName) => `
          Bonjour ${firstName || ''} !
          
          Bienvenue dans la communaut√© PAWW. Nous sommes ravis de vous compter parmi nous !
          
          Voici quelques √©tapes pour bien d√©marrer :
          1. V√©rifiez votre email
          2. Compl√©tez votre profil
          3. Ajoutez votre premier animal
          4. Connectez son collier PAWW
          
          Si vous avez des questions, notre √©quipe est l√† pour vous aider.
          
          L'√©quipe PAWW
        `
      }
    };
  }

  async sendEmail(to, subject, content, template = 'basic') {
    try {
      if (this.isProduction) {
        // TODO: Int√©grer SendGrid, Mailgun, etc.
        logger.emailSent(to, subject);
      } else {
        logger.info('üìß [DEV] Email simul√© :');
        logger.info(`√Ä: ${to}`);
        logger.info(`Sujet: ${subject}`);
        logger.info(`Contenu:\n${content}`);
        
        // Ajout d'un log sp√©cial pour le code de v√©rification en mode dev
        if (template === 'verification') {
          const code = content.match(/code de v√©rification PAWW est : (\d+)/)[1];
          logger.info(`üîë CODE DE V√âRIFICATION: ${code}`);
        }
      }
      
      return {
        success: true,
        messageId: `msg_${Date.now()}`
      };
    } catch (error) {
      logger.emailError(to, error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  async sendVerificationCode(email, code) {
    const { subject, template } = this.templates.verification;
    logger.verificationCode(email, code);
    return this.sendEmail(email, subject, template(code), 'verification');
  }

  async sendPasswordReset(email, code) {
    const { subject, template } = this.templates.passwordReset;
    logger.verificationCode(email, code);
    return this.sendEmail(email, subject, template(code), 'passwordReset');
  }

  async sendWelcome(email, firstName) {
    const { subject, template } = this.templates.welcome;
    return this.sendEmail(email, subject, template(firstName), 'welcome');
  }
}

module.exports = new EmailService(); 