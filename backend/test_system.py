#!/usr/bin/env python3
"""
Script de test pour v√©rifier que tout fonctionne
"""

import sys
import subprocess
import time
import requests
from pathlib import Path

def check_python():
    """V√©rifie la version Python"""
    print("üêç V√©rification Python...")
    version = sys.version.split()[0]
    print(f"‚úÖ Python {version}")
    return True

def check_dependencies():
    """V√©rifie les d√©pendances"""
    print("\nüì¶ V√©rification des d√©pendances...")
    
    try:
        import fastapi
        print("‚úÖ FastAPI install√©")
    except ImportError:
        print("‚ùå FastAPI manquant - lancez: pip install -r requirements.txt")
        return False
    
    try:
        import cv2
        print("‚úÖ OpenCV install√©")
    except ImportError:
        print("‚ùå OpenCV manquant")
        return False
    
    try:
        import ultralytics
        print("‚úÖ Ultralytics (YOLO) install√©")
    except ImportError:
        print("‚ùå Ultralytics manquant")
        return False
    
    return True

def test_api():
    """Teste l'API"""
    print("\nüåê Test de l'API...")
    
    try:
        response = requests.get("http://localhost:8000/")
        if response.status_code == 200:
            print("‚úÖ API accessible")
            print(f"   Version: {response.json()['version']}")
            return True
        else:
            print(f"‚ùå API retourne le code {response.status_code}")
            return False
    except requests.ConnectionError:
        print("‚ùå API non accessible - lancez d'abord: python main.py")
        return False

def test_upload_endpoint():
    """Teste l'endpoint d'upload"""
    print("\nüì§ Test de l'endpoint d'upload...")
    
    try:
        response = requests.get("http://localhost:8000/docs")
        if response.status_code == 200:
            print("‚úÖ Documentation API accessible sur http://localhost:8000/docs")
            return True
    except:
        print("‚ùå Impossible d'acc√©der √† la documentation")
        return False

def test_yolo_model():
    """Teste le mod√®le YOLO"""
    print("\nü§ñ Test du mod√®le YOLO...")
    
    try:
        from ultralytics import YOLO
        print("   Chargement du mod√®le (premi√®re fois = t√©l√©chargement ~6MB)...")
        model = YOLO('yolov8n.pt')
        print("‚úÖ Mod√®le YOLO pr√™t")
        
        # Test sur une image noire
        import numpy as np
        test_image = np.zeros((640, 640, 3), dtype=np.uint8)
        results = model(test_image)
        print("‚úÖ Inf√©rence test r√©ussie")
        return True
    except Exception as e:
        print(f"‚ùå Erreur YOLO: {e}")
        return False

def create_test_video():
    """Cr√©e une vid√©o de test simple"""
    print("\nüé• Cr√©ation d'une vid√©o de test...")
    
    try:
        import cv2
        import numpy as np
        
        # Cr√©er une vid√©o simple
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        out = cv2.VideoWriter('test_video.mp4', fourcc, 20.0, (640, 480))
        
        # 100 frames (5 secondes √† 20fps)
        for i in range(100):
            # Cr√©er une frame avec des rectangles (simulant des joueurs)
            frame = np.ones((480, 640, 3), dtype=np.uint8) * 255
            
            # Dessiner des "joueurs"
            cv2.rectangle(frame, (100, 100), (150, 250), (0, 0, 255), -1)
            cv2.rectangle(frame, (300, 150), (350, 300), (255, 0, 0), -1)
            cv2.putText(frame, f"Frame {i}", (10, 30), 
                       cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 0), 2)
            
            out.write(frame)
        
        out.release()
        print("‚úÖ Vid√©o de test cr√©√©e: test_video.mp4")
        return True
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation vid√©o: {e}")
        return False

def run_full_test():
    """Lance tous les tests"""
    print("üèê Test complet du syst√®me Smart Volley AI")
    print("=" * 50)
    
    all_good = True
    
    # Tests de base
    all_good &= check_python()
    all_good &= check_dependencies()
    
    if not all_good:
        print("\n‚ùå D√©pendances manquantes. Lancez:")
        print("   pip install -r requirements.txt")
        return
    
    # Test API
    api_ok = test_api()
    if not api_ok:
        print("\nüí° Lancez l'API dans un autre terminal:")
        print("   python main.py")
        print("\nPuis relancez ce test.")
        return
    
    all_good &= test_upload_endpoint()
    all_good &= test_yolo_model()
    
    # Cr√©er une vid√©o de test si elle n'existe pas
    if not Path("test_video.mp4").exists():
        create_test_video()
    
    # Test de l'analyseur simple
    print("\nüî¨ Test de l'analyseur...")
    try:
        from simple_ai import SimpleVolleyballAnalyzer
        analyzer = SimpleVolleyballAnalyzer()
        
        if Path("test_video.mp4").exists():
            results = analyzer.analyze_video("test_video.mp4")
            print("‚úÖ Analyse r√©ussie")
            print(f"   Joueurs d√©tect√©s en moyenne: {results['summary']['average_players_detected']}")
        else:
            print("‚ö†Ô∏è  Pas de vid√©o de test")
    except Exception as e:
        print(f"‚ùå Erreur analyse: {e}")
        all_good = False
    
    # R√©sum√©
    print("\n" + "=" * 50)
    if all_good:
        print("‚úÖ Tous les tests sont pass√©s!")
        print("\nüöÄ Prochaines √©tapes:")
        print("1. L'API tourne sur http://localhost:8000")
        print("2. La doc est sur http://localhost:8000/docs")
        print("3. Lancez votre interface React")
        print("4. Uploadez une vraie vid√©o de volley!")
    else:
        print("‚ùå Certains tests ont √©chou√©")
        print("Corrigez les erreurs ci-dessus et relancez")

if __name__ == "__main__":
    run_full_test()